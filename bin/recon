#!/usr/bin/env ruby
require 'edurange'

# Create scenario
scenario = Scenario.new
scenario.game_type = :host_discovery # Any predefined ones, determines method of scoring.
scenario.name = "EDURange"

# Define roles
web_server_role = Role.new
web_server_role.packages << 'apache2'

dns_server_role = Role.new
dns_server_role.packages << 'bind9'

attacker_role = Role.new
attacker_role.packages << 'nmap'

# Create battlespace monitor unit
battlespace_monitoring_unit = scenario.monitoring_units.new
battlespace_monitoring_unit.cidr_block = '10.0.2.0/23'

battlespace_control_subnet = battlespace_monitoring_unit.subnets.new 
battlespace_control_subnet.cidr_block = '10.0.1.0/24'
battlespace_control_subnet.control = true

battlespace_subnet = battlespace_monitoring_unit.subnets.new
battlespace_subnet.cidr_block = '10.0.2.0/24'
battlespace_subnet.allow_traffic '10.0.0.0/24', all: :all

# Create battlespace instances
(0..10).each do
  instance = battlespace_subnet.instances.new
  instance.ip = battlespace_subnet.assign_ip :random
  instance.os = :ubuntu
  instance.roles << web_server_role
  if Random.new.rand(1..5) == 2
    instance.roles << dns_server_role
  end
end

# Create player monitor unit
players_monitoring_unit = scenario.monitoring_units.new
players_monitoring_unit.cidr_block = '10.0.0.0/23'

players_control_subnet = players_monitoring_unit.subnets.new 
players_control_subnet.allow_traffic '0.0.0.0/0', tcp: :ssh # Allow internet ssh traffic
players_control_subnet.cidr_block = '10.0.1.0/24'
players_control_subnet.control = true

players_gateway = players_control_subnet.instances.new
players_gateway.internet_accessible = true

players_subnet = players_monitoring_unit.subnets.new
players_subnet.cidr_block = '10.0.0.0/24'
players_subnet.allow_traffic '10.0.1.0/24', all: :all # Allow control subnet (NAT)
players_subnet.allow_traffic '10.0.2.0/24', all: :all # Allow control subnet (NAT)

# Create player instances
(1..5).each do |team_num|
  instance = players_subnet.instances.new
  instance.ip = players_subnet.assign_ip :sequential
  instance.roles << attacker_role

  group = Group.new
  group.name = "team_#{team_num}"
  (1..3).map {|i| (3 * team_num) + i}.each do |player_num|
    user = group.users.new
    user.name = "edurange_#{player_num}"
    user.save
    instance.administrators << user
    players_gateway.users << user
  end
end

binding.pry
scenario.save! # Recursive save. Should let us know if we missed anything.
